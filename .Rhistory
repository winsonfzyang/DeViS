ls()
setwd("D:\\Winson\\R\\Tutorials\\My tutorials\\") #set this to your own working directory
getwd()
a<-read.table(file="mydata.csv") #load dataframe from .csv
library(lavaan)
dev.data = read.csv("C:\\Users\\Winson\\Desktop\\Devika\\Thesis-Main-Data-set 2017_12_06.csv")
dev.model <- '
Theft  =~ theft1 + theft2 + theft3 + theft4 + theft5
Alcohol =~ alcohol1 + alcohol2 + alcohol3 + alcohol4 + alcohol5
Aggression   =~ Aggression1	+ Aggression2	+ Aggression3	+ Aggression4	+ Aggression5
Vandalism =~ Vandalism1	+ Vandalism2 + Vandalism3 + Vandalism4 + Vandalism5
Truancy =~Truancy1 + Truancy2 + Truancy3 + Truancy4 + Truancy5
Defiance =~ Defiance1 + Defiance2 + Defiance3 + Defiance4 + Defiance5
Bullying =~ bullying1 + bullying2 + bullying3 + bullying4 + bullying5
Others =~ Others1 + Others2 + Others3 + Others4 + Others5
'
fit <- cfa(dev.model, data=dev.data)
library(semPlot)
semPaths(fit, what = "est", layout = "tree", title = TRUE, style = "LISREL")
x = 5
library(lavaan)
dev.data = read.csv("C:\\Users\\Winson\\Desktop\\Devika\\Thesis Main Data set copy.csv")
dev.model <- '
Theft  =~ theft1 + theft2 + theft5
Alcohol =~ alcohol1 + alcohol2 + alcohol3 + alcohol4 + alcohol5
Aggression   =~ Aggression1	+ Aggression2	+ Aggression3	+ Aggression4	+ Aggression5
Vandalism =~ Vandalism1	+ Vandalism2 + Vandalism3 + Vandalism4 + Vandalism5
Truancy =~ Truancy2 + Truancy3
Defiance =~ Defiance1 + Defiance2 + Defiance4 + Defiance5
Bullying =~ bullying1 + bullying2 + bullying3 + bullying4 + bullying5
Others =~ Others2 + Others3 + Others4 + Others5
'
fit <- cfa(dev.model, data=dev.data)
library(semPlot)
semPaths(fit, what = "est", layout = "tree", title = TRUE, style = "LISREL")
dev.data = read.csv("C:\\Users\\Winson\\Desktop\\Devika\\Thesis-Main-Data-set-copy-sent-to-winson.csv")
dev.model <- '
Theft  =~ theft1 + theft2 + theft5
Alcohol =~ alcohol1 + alcohol2 + alcohol3 + alcohol4 + alcohol5
Aggression   =~ Aggression1	+ Aggression2	+ Aggression3	+ Aggression4	+ Aggression5
Vandalism =~ Vandalism1	+ Vandalism2 + Vandalism3 + Vandalism4 + Vandalism5
Truancy =~ Truancy2 + Truancy3
Defiance =~ Defiance1 + Defiance2 + Defiance4 + Defiance5
Bullying =~ bullying1 + bullying2 + bullying3 + bullying4 + bullying5
Others =~ Others2 + Others3 + Others4 + Others5
'
fit <- cfa(dev.model, data=dev.data)
summary(fit, rsquare=TRUE, standardized=TRUE)
fitMeasures(fit,c("rmsea","nnfi","ecvi"))
shiny::runApp('D:/Winson/Data Science/R/Projects/Learning Statistics with Shiny/CLT_mean')
read.table("D:\\Winson\\UCSF\\Masters Thesis\\MVPA\\SVM Weights.txt", header = FALSE)
SVMweights <- read.table("D:\\Winson\\UCSF\\Masters Thesis\\MVPA\\SVM Weights.txt", header = FALSE)
View(SVMweights)
col.names(x)
row.names(SVMweights)
columns <- c("R bsAmy","L bsAmy","R aTP","L aTP","RGyRec","LGyRec",
"R orbGy","L orbGy","R sgACC","L sgACC","R NAc","L NAc")
row.names(SVMweights) <- columns
View(SVMweights)
colnames(SVMweights)
colnames(SVMweights) <- columns
SVMweights
library(corrplot)
corrplot(SVMweights, method="color")
SVMweights
cor(mtcars)
M = cor(mtcars)
View(M)
typeof(M)
class(M)
svmweights <- data.matrix(SVMweights)
corrplot(svmweights, method="color")
heatmap(svmweights)
heatmap(as.matrix(SVMweights))
View(svmweights)
View(svmweights)
heatmap(as.matrix(SVMweights))
heatmap(as.matrix(SVMweights),
Colv = NULL, Rowv = NULL)
library(reshape2)
co=melt(svmweights)
head(co)
co
library(ggplot2)
library(scales) # for muted function
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
geom_text(aes(fill = co$value, label = round(co$value, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
ord=hclust(1-as.dist(svmweights))$order
co=melt(svmweights[ord,ord])
ggplot(co, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = co$value, label = round(co$value, 2))) +
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) +
theme(panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"),
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
ggplot(co, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = co$value, label = round(co$value, 2))) +
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) +
theme(panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"),
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
install.packages("plotly")
install.packages(c("ade4", "adegenet", "adehabitatLT", "adephylo", "antaresProcessing", "arules", "awsMethods", "backports", "BDgraph", "brainGraph", "callr", "chron", "circlize", "CORElearn", "crul", "data.tree", "dbplyr", "ddalpha", "digest", "dotCall64", "DRR", "DT", "ellipse", "extraDistr", "fields", "filematrix", "fpc", "fractal", "ggformula", "git2r", "globals", "haven", "hdrcde", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "knitr", "ks", "lava", "lhs", "listenv", "lme4", "lubridate", "magic", "matrixStats", "MBESS", "MCMCpack", "microbenchmark", "mosaicData", "msm", "mvtnorm", "np", "oc", "officer", "openssl", "pbapply", "pbdMPI", "pcaPP", "pracma", "quantreg", "R.cache", "R.rsp", "ranger", "Rcpp", "RcppEigen", "RCurl", "recipes", "ReporteRs", "ReporteRsjars", "reprex", "rgl", "RGtk2", "rlang", "rms", "rprojroot", "rptR", "rsq", "RWeka", "RWekajars", "seriation", "shape", "shinyjs", "slam", "sp", "spam", "spatstat", "spData", "StanHeaders", "survey", "tableone", "tesseract", "testthat", "tibble", "tidyr", "trend", "tseries", "TTR", "urltools", "vegan", "VGAM", "viridis", "viridisLite", "visNetwork", "wikitaxa", "withr", "wnominate", "xml2", "xts", "zoo"))
install.packages("flexdashboard")
library("markdown", lib.loc="~/R/win-library/3.4")
library("flexdashboard", lib.loc="~/R/win-library/3.4")
library("rmarkdown", lib.loc="~/R/win-library/3.4")
remove.packages("markdown", lib="~/R/win-library/3.4")
remove.packages("rmarkdown", lib="~/R/win-library/3.4")
remove.packages("flexdashboard", lib="~/R/win-library/3.4")
install.packages(""markdown"")
install.packages("markdown")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("flexdashboard")
sessionInfo()
opts_chunk
devtools::install_github('rstudio/rmarkdown'
)
shiny::runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
shiny::runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
devtools::install_github("sachsmc/ggkm")
library(shiny)
library(shinyjs)
library(ggplot2)
library(ggrepel)
library(scales)
library(DT)
library(tidyr)
library(dplyr)
library(Hmisc)
library(quantreg)
library(markdown)
library(rlang)
library(lazyeval)
if (!suppressWarnings(require(ggkm, quietly=TRUE))) {
devtools::install_github("sachsmc/ggkm")
library(ggkm)
}
if (!suppressWarnings(require(table1, quietly=TRUE))) {
devtools::install_github("benjaminrich/table1")
library(table1)
}
runApp('D:/Winson/DeVis_R/ggplotwithyourdata-master/shinyapp')
# Signal the app to update the table manually
observeEvent(input$update_table_btn, {
values$updateTable <- TRUE
})
shiny::runApp('D:/Winson/DeVis_R/ggplotwithyourdata-master/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/hello')
runApp('D:/Winson/DeVis_R/hello')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
runApp('D:/Winson/DeVis_R/test/shinyapp')
I('function() { this.setValue(""); }')
runApp('D:/Winson/DeVis_R/test/shinyapp')
shiny::runApp('D:/Winson/DeVis_R/test/shinyapp')
shiny::runApp('D:/Winson/DeVis_R/DEViS/shinyapp')
devtools::install_github('hadley/ggplot2')
install.packages("heatmaply")
install.packages(c("antaresRead", "archivist", "BH", "brainGraph", "callr", "crul", "dbplyr", "dendextend", "devtools", "estimability", "flexclust", "forcats", "future", "getopt", "knitr", "matrixStats", "miscF", "neldermead", "oc", "optimsimplex", "phangorn", "qtl", "R.filesets", "randtoolbox", "rentrez", "rlang", "RSAGA", "rvg", "spData", "stdReg", "stringr", "tesseract", "timeDate", "tseries", "wnominate", "XML"))
install.packages(c("crul", "RSAGA", "stdReg", "timeDate"))
shiny::runApp('D:/Winson/DeVis_R/DEViS/shinyapp')
devtools::install_github("tidyverse/ggplot2")
shiny::runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS original')
library(sendmailR)
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original - Copy')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
shiny::runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS original')
runApp('D:/Winson/DeVis_R/DEViS original')
shiny::runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
req(x)
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
vif(lm(prestige ~ income + education + type, data=Duncan))
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
shiny::runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
methods::is(x, "sourceable")
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
# Change histogram plot fill colors by groups
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity")
df <- data.frame(
sex=factor(rep(c("F", "M"), each=200)),
weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5)))
)
# Change histogram plot fill colors by groups
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity")
# Use semi-transparent fill
p<-ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity", alpha=0.5)
p
# Add mean lines
p+geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed")
df %>%
group_by("sex")
df %>%
group_by("sex") %>%
summarise(grp.mean = mean(weight))
df
df %>%
group_by("sex") %>%
summarise(grp.mean = mean(weight))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(weight))
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
weight
set.seed(1234)
df <- data.frame(
sex=factor(rep(c("F", "M"), each=200)),
weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5)))
)
head(df)
# Change histogram plot fill colors by groups
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity")
# Use semi-transparent fill
p<-ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity", alpha=0.5)
p
# Add mean lines
df %>%
group_by(sex)
df %>%
group_by(sex) %>%
summarise(grp.mean = mean("weight"))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(df$weight))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(dweight))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(weight))
summarise(grp.mean = mean(get(weight))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(get(weight))
)
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(~get(weight)))
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(as.formula(weight)))
summarise_vars <- list(list('cyl', 'mpg'), list('vs', 'disp'))
summarise_vars
summarise_vars[1]
v <- summarise_vars[1]
group_var <- v[1]   # group by this variable
group_var
v
list('cyl', 'mpg')
v = list('cyl', 'mpg')
v
group_var <- v[1]   # group by this variable
group_var
paste0('mean(', v[2], ')')
summ <- paste0('mean(', v[2], ')')  # construct summary method, e.g. mean(mpg)
.dots
summ
group_var
mtcars %>%
group_by_(.dots = "cyl") %>%
summarise_(.dots = setNames("mean(mpg)", "summ_name"))
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
set.seed(1234)
df <- data.frame(
sex=factor(rep(c("F", "M"), each=200)),
weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5)))
)
head(df)
# Change histogram plot fill colors by groups
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity")
# Use semi-transparent fill
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity", alpha=0.5)
df %>%
group_by(sex) %>%
summarise(grp.mean = mean(as.formula(weight)))
mu <- df %>%
group_by(sex) %>%summarise(grp.mean = mean(weight))
# Use semi-transparent fill
p<-ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity", alpha=0.5)
p+geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed")
mu
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
shiny::runApp('D:/Winson/DeVis_R/DEViS/DEViS app')
shiny::runApp('D:/Winson/DeVis_R/DEViS')
runApp('D:/Winson/DeVis_R/DEViS')
shiny::runApp('D:/Winson/DeVis_R/DEViS')
shiny::runApp('D:/Winson/DeVis_R/DEViS')
install.packages(c("purr","stringr
"))
install.packages("stringr")
install.packages("purr")
shiny::runApp('D:/Winson/DeVis_R/DEViS')
car
cars
mpg
view(mpg)
View(mpg)
as.data.frame(mpg)
df <- as.data.frame(mpg)
View(df)
df$cyl
df$cyl <- factor(df$cyl)
df$cyl
names(mpg)
tgc2
ToothGrowth
tgc <- ToothGrowth
View(tgc)
ggplot(tgc, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-ci, ymax=len+ci),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(tgc, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity"))
tgc$dose <- factor(tgc$dose)
ggplot(tgc, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity"))
ggplot(tgc, aes(x=dose, y=len, fill=supp)) +
geom_bar(position=position_dodge(), stat="identity")
ggplot(tgc, aes(x=dose, y=len) +
ggplot(tgc, aes(x=dose, y=len)) +
geom_bar(position=position_dodge(), stat="identity")
tgc$dose==0.5
tgc[tgc$dose==0.5,]
tgc[tgc$dose==0.5,"dose"]
sum(tgc[tgc$dose==0.5,"dose"])
as.numeric(tgc[tgc$dose==0.5,"dose"])
count(tgc[tgc$dose==0.5,"dose"])
tgc <- ToothGrowth
count(tgc[tgc$dose==0.5,"dose"])
sum(tgc[tgc$dose==0.5,"dose"])
sum(tgc[tgc$dose==0.5,"len"])
mean(tgc[tgc$dose==0.5,"len"])
ggplot(tgc, aes(x=dose, y=len)) +
geom_bar(position=position_dodge(), stat="summary")
mean(tgc[tgc$dose==1.5,"len"])
d <- ggplot(mtcars, aes(cyl, mpg)) + geom_point()
d + stat_summary_bin(aes(y = price), fun.y = "mean", geom = "bar")
d <- ggplot(diamonds, aes(cut))
d + stat_summary_bin(aes(y = price), fun.y = "mean", geom = "bar")
ggplot(diamonds, aes(cut)) +
geom_bar(position=position_dodge(), stat="summary")
ggplot(diamonds, aes(x=cut,y=price)) +
geom_bar(position=position_dodge(), stat="summary")
ggplot(diamonds, aes(x=cut,y=price)) +
geom_bar(position=position_dodge(), stat="summary")
d <- ggplot(diamonds, aes(cut))
d + stat_summary_bin(aes(y = price), fun.y = "mean", geom = "bar")
runApp('D:/Winson/DeVis_R/DEViS')
new_df <- read.csv("D:\\NUH Caregiver Study\\association paper\\IPOS dataset 2018-03-07 [DO NOT EDIT].csv")
orig_df <- read.csv("D:\\NUH Caregiver Study\\Dataset_complete 2018-01-04 original [do not edit].csv")
new_df <- read.csv("D:\\NUH Caregiver Study\\association paper\\IPOS dataset 2018-03-07 [DO NOT EDIT].csv")
orig_df <- read_excel("D:\\NUH Caregiver Study\\Dataset_complete 2018-01-04 original [do not edit].xlsx")
library(readxl)
orig_df <- read_excel("D:\\NUH Caregiver Study\\Dataset_complete 2018-01-04 original [do not edit].xlsx")
SN_org <- new_df$ï..SN_original
SN_org
orig_df$SN_original
new_df <- read.csv("D:\\NUH Caregiver Study\\association paper\\IPOS dataset 2018-03-07 [DO NOT EDIT].csv")
new_df$ï..SN_original
new_df <- read.csv("D:\\NUH Caregiver Study\\association paper\\IPOS dataset 2018-03-07 [DO NOT EDIT].csv")
orig_df <- read_excel("D:\\NUH Caregiver Study\\Dataset_complete 2018-01-04 original [do not edit].xlsx")
SN_org <- new_df$ï..SN_original
SN_org <- new_df$ï..SN_original
SN_org
SN_org <- as.character(new_df$ï..SN_original)
SN_org
orig_df$SN_original
orig_df[SN_org]
orig_df[SN_org,]
df_totake <- orig_df[SN_org,]
View(df_totake)
View(df_totake)
names(df_totake)
names(df_totake)[1:30]
names(df_totake)[1:40]
names(df_totake)[1:50]
names(df_totake)[1:49]
(df_totake)[1:49]
df_totake <- orig_df[SN_org,1:49]
df_totake
getwd()
write.csv(df_totake,"D:\\NUH Caregiver Study\\association paper\\dataset\\IPOS demo.csv")
orig_df$SN_original==SN_org
orig_df$SN_original
SN_org
orig_df
sort(orig_df)
new_df <- read.csv("D:\\NUH Caregiver Study\\association paper\\IPOS dataset 2018-03-07 [DO NOT EDIT].csv")
orig_df <- read_excel("D:\\NUH Caregiver Study\\Dataset_complete 2018-01-04 original [do not edit].xlsx")
SN_org <- as.character(new_df$ï..SN_original)
orig_df$SN_original==SN_org
SN_filter <- orig_df$SN_original==SN_org
SN_org
orig_df$SN_original
which(orig_df$SN_original==SN_org)
SN_org
install.packages("NetworkToolbox")
shiny::runApp('D:/Winson/DeVis_R/DEViS')
