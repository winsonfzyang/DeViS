n
df <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(df) <- anx_items
for (i in 1:length(anx_items)){
df[,i] <- runif(400,0,10)
}
# create factored gender
# create factored treatment group with three levels
treatment <- c("Treatment A","Treatment B", "Treatment C")
# create factored treatment group with three levels
treatment <- c("Treatment A","Treatment B", "Treatment C")
# create factored treatment group with three levels
treatment <- factor(c("Treatment A","Treatment B", "Treatment C"))
treatment
# Create group variable with three cat: Alcohol, Tobacco, Cannabis
users <- factor(c("alcohol","tobacco","cannabis"))
# create factored gender
gender <- factor(c("male","female"))
# Put all the parts together
df_dmg <- data.frame(subject,gender,treatment,users)
# Create group variable with three cat: Alcohol, Tobacco, Cannabis
users <- factor(c("alcohol","tobacco","cannabis","poly"))
# Put all the parts together
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,times=200),rep(users,times =100))
rep(gender,times=200)
rep(treatment,times=200)
# create factored treatment group with two levels
treatment <- factor(c("TMS","Non-TMS"))
# Create group variable with three cat: Alcohol, Tobacco, Cannabis
users <- factor(c("alcohol","tobacco","cannabis","poly"))
# Create simulated anxiety items
anx_items <- paste("anx",c(1:10),sep="_")
df <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(df) <- anx_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(anx_items)){
df[,i] <- runif(400,0,10)
}
# Put all the parts together
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,times=200),rep(users,times =100))
gender
treatment
users
subject
subject <- paste("s",n,sep="_") # Subject number
subject
# Put all the parts together
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,times=200),rep(users,times =100))
cbind(df_dmg,df)
View(df_dmg)
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users")
colnames(df_dmg) <- dmg_names
cbind(df_dmg,df)
# Create simulated impulse score
imp_items <- paste("imp",c(3:10),sep="_")
df <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(df) <- imp_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(imp_items)){
df[,i] <- runif(400,0,10)
}
#### More on Data frames ####
# Set the seed so random numbers are same depending on the seed number
set.seed(123)
#### Creating a dataset from scartch ####
# create a simulated vectors first
n = 1:400 # number of subjects
subject <- paste("s",n,sep="_") # Subject number
# create factored gender
gender <- factor(c("male","female"))
# create factored treatment group with two levels
treatment <- factor(c("TMS","Non-TMS"))
# Create group variable with three cat: Alcohol, Tobacco, Cannabis
users <- factor(c("alcohol","tobacco","cannabis","poly"))
# Create simulated anxiety items
anx_items <- paste("anx",c(1:10),sep="_")
anx <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(anx) <- anx_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(anx_items)){
anx[,i] <- runif(400,0,10)
}
# Create simulated impulse score
imp_items <- paste("imp",c(3:10),sep="_")
imp <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(imp) <- imp_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(imp_items)){
imp[,i] <- runif(400,0,10)
}
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,times=200),rep(users,times =100))
colnames(df_dmg) <- dmg_names
cbind(df_dmg,anx,imp)
df <- cbind(df_dmg,anx,imp)
head(df)
# Create simulated impulse score
imp_items <- paste("imp",c(1:10),sep="_")
#### More on Data frames ####
# Set the seed so random numbers are same depending on the seed number
set.seed(123)
#### Creating a dataset from scartch ####
# create a simulated vectors first
n = 1:400 # number of subjects
subject <- paste("s",n,sep="_") # Subject number
# create factored gender
gender <- factor(c("male","female"))
# create factored treatment group with two levels
treatment <- factor(c("TMS","Non-TMS"))
# Create group variable with three cat: Alcohol, Tobacco, Cannabis
users <- factor(c("alcohol","tobacco","cannabis","poly"))
# Create simulated anxiety items
anx_items <- paste("anx",c(1:10),sep="_")
anx <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(anx) <- anx_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(anx_items)){
anx[,i] <- runif(400,0,10)
}
# Create simulated impulse score
imp_items <- paste("imp",c(1:10),sep="_")
imp <- data.frame(matrix("0", ncol = 10, nrow = length(n)))
colnames(imp) <- imp_items
# Using the for loop to parse through columns/rows/index
for (i in 1:length(imp_items)){
imp[,i] <- runif(400,3,10)
}
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,times=200),rep(users,times =100))
colnames(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
#### Data manipulation ####
# 1. create tot
# 1. create total scores
imp_items
# 1. create total scores
df[imp_items]
# 1. create total scores
sum(df[imp_items])
# 1. create total scores
colSums(df[imp_items])
# 1. create total scores
rowSums(df[imp_items])
# 1. create total scores
df$anx_tot <- rowSums(df[anx_items]) #total score for anxiety
df$imp_tot <- rowSums(df[imp_items]) #total score for impulse
head(df)
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),rep(users,times =100))
colnames(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
# 1. create total scores
df$anx_tot <- rowSums(df[anx_items]) #total score for anxiety
df$imp_tot <- rowSums(df[imp_items]) #total score for impulse
summary(df)
dmg_names
df2 <- df[dmg_names, 'anx_tot','imp_tot']
df2 <- df[c(dmg_names, 'anx_tot','imp_tot')]
head(df2)
summarwy(df2)
summary(df2)
# Create simulated times used
times <- rnorm(400,4,1)
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),rep(users,times =100),times)
colnames(df_dmg) <- dmg_names
# Put all the parts together
dmg_names <- c("subject","gender","treatment","users","times")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),rep(users,times =100),times)
colnames(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
# 1. create total scores
df$anx_tot <- rowSums(df[anx_items]) #total score for anxiety
df$imp_tot <- rowSums(df[imp_items]) #total score for impulse
df2 <- df[c(dmg_names, 'anx_tot','imp_tot')]
head(df2)
# Get only males
df2$gender=="male"
# Get only males
df2$gender=="male" && df2$treatment=="TMS"
# Get only males
df2$gender=="male" && df2$treatment=="TMS"
# Get only males
df[df2$gender=="male" && df2$treatment=="TMS"]
# Get only males
df[df2$gender=="male" & df2$treatment=="TMS"]
# Get only males
df[df2$gender=="male" & df2$treatment=="TMS",]
# Get males + TMS + alcohol
df[df2$gender=="male" & df2$treatment=="TMS" & df2$users=="alcohol",]
filtervar <- c("male","TMS","alcohol")
library(pwr)
install.packages("neuRosim")
test <- runif(200,4,20)
test <- runif(200,4,20)
shiny::runApp('D:/Winson/Github/DEViS')
n <- 1:400
subject <- paste("s", n,sep="_")
subject
gender <- factor(c("male","female"))
treatment <- factor(c("TMS","non_TMS"))
users <- factor(c("alcohol","tobacco","cannabic","poly"))
# create anxiety items
anx_items <- paste("anx", 1:10,sep="_")
anx_items
length(subject)
anx <- data.frame(matrix("0",ncol=10,nrow=length(subject)))
View(anx)
anx_items
for (i in 1:length(anx_items)){
anx[,i] <- runif(400,3,10)
}
View(anx)
View(anx)
View(anx)
colnames(anx)
colnames(anx) <- anx_items
colnames(anx)
imp_items <- paste("imp", 1:10,sep="_")
imp <- data.frame(matrix("0",ncol=10,nrow=length(subject)))
for (i in 1:length(imp_items)){
anx[,i] <- runif(400,3,10)
}
colnames(imp) <- imp_items
colnames(imp)
# No of time used
times <- rnorm(400,4,2)
### Lets put everythign together
dmg_names <- c("subject","gender","treatment","uers","times")
data.frame(subject,gender,treatment,users,times)
data.frame(subject,rep(gender,times=200),rep(treatment,each=200),users,times)
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),users,times)
names(df_dmg)
names(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
View(df)
# create impulsivity items
imp_items <- paste("imp", 1:10,sep="_")
imp <- data.frame(matrix("0",ncol=10,nrow=length(subject)))
for (i in 1:length(imp_items)){
anx[,i] <- runif(400,3,10)
}
colnames(imp) <- imp_items
colnames(imp)
# No of time used
times <- rnorm(400,4,2)
### Lets put everythign together
dmg_names <- c("subject","gender","treatment","uers","times")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),users,times)
names(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
View(df)
# create impulsivity items
imp_items <- paste("imp", 1:10,sep="_")
imp <- data.frame(matrix("0",ncol=10,nrow=length(subject)))
for (i in 1:length(imp_items)){
imp[,i] <- runif(400,3,10)
}
colnames(imp) <- imp_items
colnames(imp)
# No of time used
times <- rnorm(400,4,2)
### Lets put everythign together
dmg_names <- c("subject","gender","treatment","uers","times")
df_dmg <- data.frame(subject,rep(gender,times=200),rep(treatment,each=200),users,times)
names(df_dmg) <- dmg_names
df <- cbind(df_dmg,anx,imp)
# create total score
df[anx_items]
# create total score
df$anx_tot <- rowSums(df[anx_items])
df$imp_tot <- rowSums(df[imp_items])
c(dmg_names,"anx_tot","imp_tot")
df2 <- df[c(dmg_names,"anx_tot","imp_tot")]
View(df2)
# If i only want male
df2[df2$gender=="male",]
# If i want male + tms
df2[df2$gender=="male" & df2$treatment=="TMS",]
# If i want male + tms + poly
df2[df2$gender=="male" & df2$treatment=="TMS" & df2$users=="poly",]
# If i want male + tms + poly
df2[df2$gender=="male" & df2$treatment=="TMS" & df2$users=="alcohol",]
# More efficient way to filter data
library(dplyr)
df2 %>%
filter(gender =="male" & treatment =="TMS")
df2 %>%
filter(gender =="male" & treatment =="TMS" & users == "alcohol")
names(df2)
df2 %>%
filter(gender =="male" & treatment =="TMS" & users == "alcohol") %>%
summarise(mean(anx_tot))
df2 %>%
filter(gender =="male") %>%
group_by(treatment) %>%
summarise(mean(anx_tot))
df3 <- df2 %>%
filter(gender =="male") %>%
group_by(treatment) %>%
summarise(mean(anx_tot))
View(df3)
View(df3)
df3 <- df2 %>%
filter(gender =="male") %>%
group_by(treatment) %>%
summarise(mean(anx_tot),sd(anx_tot))
df2 %>%
filter(gender =="male") %>%
group_by(treatment) %>%
summarise(mean(anx_tot),sd(anx_tot))
getwd()
### saving data
write.csv(df2,"test_Data.csv")
df <- read.csv("test_Data.csv")
df$X <- NULL
# T-test
t.test(x=df$anx_tot)
t.test(x=df$anx_tot,alternative = "less")
# T-test
t.test(x=df$anx_tot,y=df$imp_tot,alternative = "two.sided")
# T-test
t.test(x=df$anx_tot,y=df$imp_tot,alternative = "two.sided",var.equal = TRUE)
t.test(anx_tot ~ gender, data=df,var.equal = TRUE, alternative = "two.sided")
lm(anx_tot ~ gender, data=df)
summary(lm(anx_tot ~ gender, data=df))
# Correlation
cor(df$anx_tot,df$imp_tot)
cor.test(df$anx_tot,df$imp_tot)
cor.test(df$anx_tot,df$imp_tot)
mod1 <- lm(anx_tot~ users, data=df)
names(df)
mod1 <- lm(anx_tot~ uers, data=df)
summary(mod1)
drop1(mod1, test="F")
mod2 <- lm(anx_tot~ uers + genders, data=df)
mod2 <- lm(anx_tot~ uers + gender, data=df)
summary(mod2)
mod2 <- lm(anx_tot~ uers + treatment, data=df)
summary(mod2)
anova(mod1,mod2)
summary(mod1)
summary(mod2)
summary(mod1)
summary(mod2)
lm(anx_tot~ uers + treatment, data=df)
summary(lm(anx_tot~ uers + treatment, data=df))
summary(aov(anx_tot~ uers + treatment, data=df))
df %>%
filter(gender =="male" &
treatment =="TMS" &
users == "alcohol"
df %>%
filter(gender =="male" &
treatment =="TMS" &
users == "alcohol")
# Get libraries
library(plotly)       # Dynamic data visualization
library(corrplot)     # Nice correlation matrix
library(RColorBrewer) # Color brewer
install.packages("corrplot")
#### 3D Scatter Plot ####
plot_ly(data=mtcars, x = ~wt, y = ~hp, z = ~qsec,
marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
#### Scatter Plot ####
plot_ly(data = iris,
x = ~Sepal.Length,
y = ~Petal.Length,
color = ~Species,
type="scatter", mode = "markers",
marker = list(size = 15),
# Hover text:
text = ~paste("<b>Species:</b> ", Species,
"<br><b>Sepal Length:</b> ", Sepal.Length,
"<br><b>Petal Length:</b>", Petal.Length)) %>%
layout(xaxis=list(title="Sepal Length"),
yaxis=list(title="Petal Length"))
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
#get the summary of the results
T3_summary <- summarySE(T3, measurevar="ts3_sar", groupvars=c("DX_Combo"))
#### Scatterplot ####
library(ggplot2)
gg <- ggplot(data=yourdata, aes(x=x, y=y)) +
geom_point(aes(col=category, size=yoursize)) +
geom_smooth(method="lm", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
theme_Publication <- function(base_size=14, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
setwd("D:\\Winson\\R\\Tutorials\\My tutorials")
getwd()
# install.packages(ggplot2)   install only once!
library(ggplot2)  #use library() to get the function you want to retrieve
library(ggplot2)
runif(500,min=)
gg <- ggplot(data=yourdata, aes(x=x, y=y)) +
geom_point(aes(col=category, size=yoursize)) +
geom_smooth(method="lm", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
# Get tableau color
tableau10 <- c("#1F77B4","#FF7F0E","#2CA02C","#D62728","#9467BD",
"#8C564B","#E377C2","#7F7F7F","#BCBD22","#17BECF")
df = read.csv("C:\\Users\\Winson\\Desktop\\gavin\\TMS-DATA-RAW-ATC-2.csv")
names(df)
c("Participant.Code", "Session.." , "X30.DAY.CAN.USE_3","NIAA_2","Nic.Dep.4")
vars <- c("Participant.Code", "Session.." , "X30.DAY.CAN.USE_3","NIAA_2","Nic.Dep.4")
df <- df[vars]
#Rename variables
names(df) <- c("Participant", "Session" , "Cannabis Use","Alcohol Use","Nicotine Use")
names(df)
df$Session=factor(df$Session, levels =c("1","2","3","4","2-wk-follow","4-wk-follow"))
levels(df$Session)
write.csv("C:\\Users\\Winson\\Desktop\\gavin\\TMS-ATC.csv")
write.csv(df,"C:\\Users\\Winson\\Desktop\\gavin\\TMS-ATC.csv")
shiny::runApp('D:/Winson/Github/DEViS')
